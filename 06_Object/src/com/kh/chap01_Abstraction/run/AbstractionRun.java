package com.kh.chap01_Abstraction.run;

import com.kh.chap01_Abstraction.model.vo.Student;

public class AbstractionRun {
	
	/*
	 1. 객체지향언어: "객체"를 "지향" 하는 언어로 "객체 중심"으로 돌아간다고 생각하면 됨.
	 
	 2. 객체란? 
	 	사전적 의미로는 현실세계에 독립적으로 존재(목적이 있고, 의미가 있는)하는 모든 것들을 의미
	 	눈에 보이든, 보이지 않든 존재가치가 있는 것들. ex. 유형, 무형, 사물, 개념 ...
	 	
	 3. 객체지향 프로그래밍?
	 	현실세계의 어떤 독립적인 존재들(개거체) 간의 상호작용-> 프로그래밍을 통해서 가상세계(코드)로 구현하는 과정
	 
	 4. 구현하고자 하는 프로그램상의 필요한 객체를 만들기 위해서 (즉, 생성하기 위해서)
	 	(목적에 맞는 객체만 만들어야함 -> 만약 의류쇼핑몰을 열거라면 가발을 판다면, 목적에 맞지않는다.)
	 	: 클래스라는 틀을 먼저 만들어내야 된다. (각 객체들의 속성(정보)들을 담아내는 그릇과도 같은 존재)
	 	   	어떻게? 추상화라는 과정 + 캡슐화라는 과정 = 접목시켜서 클래스를 만들어준다.
	 	   	
	 5. 추상화 과정
	 	1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해 볼 것
	 	2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출할 것 (100개가 됐든..)
	 	3) 2번과정을 통해서 추출된 것들을 가지고 내가 구현하고자 하는 프로그램의 "실질적인 목적"에 맞춰서 불필요한 속성과 기능들을 제거해나간다.
	 	4) 최종적으로 추려진 속성들을 가지고 어떤 자료형or 어ㄸㄴ 변수명으로 사용할 건지 생각
	 	
	 		ex1) 학생관리 프로그램
	 			1) 학생관련 객체 (홍길동학생, 김영희학생, 홍길녀학생, 강개순학생..)
	 			2) 공통적인 속성 및 기능(이름, 나이, 주소, 전화번호, 키, 달리기속도, 학년, 반, 국어점수, 수학점수, 몸무게, 머리색깔, 발사이즈, 먹는다 
	 			3) 	학생"인적사항"을 관리하는 프로그램이라고 한다면  : 이름, 나이, 주소, 전화번호, 학년, 반
	 				학생"성적"을 관리하는 프로그램이라고 한다면: 이름, 학년, 반, 국어점수, 수학점수, 영어점수
	 				학생"건강"을 관리하는 프로그램이라고 한다면: 이름, 학년, 반, 키, 달리기속도, 몸무게, 먹는다
	 				
	 		 		최종적으로 추려진 속성이 "이름, 나이, 키" 가정하에
	 			4)  이름-> String name;
	 				나이-> int age;
	 				키-> double height;
	 				
	 	5) 위에서 선정된 것들을 가지고 본격적으로 프로그래밍. 
	 	 	
	 	 		1) "변수" 만으로 프로그램을 구현하게 된다면?
	 				* 변수 - 하나의 자료형의 하나의 값만을 보관할 수 있음
	 				
	 				홍길동 객체를 만들기 위해서 --> String name1 = "홍길동"; int age1 = 20; double height1 = 162.3;
	 				김말동 객체를 만들기 위해서 --> String name2 = "김말동"; int age2 = 21; double height2 = 173.4;
	 				강개순 객체를 만들기 위해서 --> String name3 = "강개순"; int age3 = 32; double height3 = 182.7;
	 				...
	 				
	 				-> 변수만을 가지고 프로그래밍을 했을때 생기는 문제? 수백명의 학생들을 관리하는 프로그램을 구현해야한다면 -> 수천개의 변수가 생기고 관리하기어려워진다
	 				
	 			2) "배열" 만으로 프로그램을 구현하게 된다면?
	 				* 배열 - 하나의 자료형의 여러개의 값들을 보관할 수 있음
	 				
	 				학생들의 이름을 보관하는    String[] name   = { "홍길동", "김말동", "강개순", . . . };
	 				학생들의 나이를 보관하는  	   int[] age    = {    20   ,   21   ,    32   , . . . };
	 				학생들의 키를 보관하는	double[] height = {   162.3 ,  173.4 ,   182.7 , . . . };
	 	
	 				--> 어떤 문제가 발생? --> 한명이 전학가게 된다면 해당 학생의 인덱스를 찾아서 일일히 name, age, height 배열속에 찾아서 지워줘야되는데
	 										실수해서 하나의 배열에서 지우지 못한다면?? 문제발생
	 									--> 새로운 학생이 오게되면 새로운 정보를 배열에 추가해줘야하는데 크기변경 불가(배열의 특징)
	 									
	 			3) 그래서 나온 개념이 "구조체"의 개념!
	 			
	 				* 구조체 - 여러개의 자료형의 여러개의 값들을 보관할 수 있는 배열같은 형태 ( 직접 자료형을 만든다 == 클래스 )
	 				
	 				String 값도 보관하고, int값도 보관하고, double 값도 같이 보관 할 수 있도록 나만의 배열같은 자료형을 만든다 -> 클래스
	 				
	 				Student 클래스(학생객체들을 찍어낼 수 있는 틀)를 만들어서
	 				그 안에 필드라는 걸로 String name, int age, double height를 정의해놓는다.

	 
	 */

	
	public static void main(String[] args) {
		
		int[] arr = new int[3];
		
		// 홍길동 객체를 만들꺼임
		// 1. 객체를 찍어내기 위해서는
		//  	new 키워드를 통해 객체 생성(즉, 공간할당)
		// 		클래스명 변수명 = new 클래스명();
		Student hong = new Student();
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 162.3;
		
		Student dong = new Student();
		dong.name = "김말동";
		dong.age = 21;
		dong.height = 173.4;
		
		//xxx님의 나이는 xxx살이고, 키는 xxxcm 입니다.
		System.out.printf("%s님의 나이는 %d살이고, 키는 %.1fcm입니다. \n", hong.name, hong.age, hong.height);
		System.out.printf("%s님의 나이는 %d살이고, 키는 %.1fcm입니다. \n", dong.name, dong.age, dong.height);
		
		
		
		
		
		
	}

}
